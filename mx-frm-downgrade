#!/bin/bash

TMP_RFS_P1="/dev/shm/rfs_p1"
OVERLAY_P1="/overlayfs/v1/p1"
KERNEL_PART=$(cat /proc/cmdline)
KERNEL_PART="${KERNEL_PART##*root=}"
KERNEL_PART="${KERNEL_PART%% *}"
KERNEL_PART="${KERNEL_PART%%2}1"

CFG_FILE="/etc/moxa-configs/moxa-firmware-tools.json"
if [ -f $CFG_FILE ]; then
	DOWNGRADE_FUNC="$(jq ".DOWNGRADE_FUNC" $CFG_FILE --raw-output)"
fi

downgrade(){
	if [ x"$DOWNGRADE_FUNC" != x"" ]; then
		# run customized downgrade function
		eval $DOWNGRADE_FUNC
	else
		# run default downgrade function
		rm -rf /overlayfs/v1
		rm -rf /overlayfs/v1_upgrade
		cp -a /overlayfs/v0 /overlayfs/v1
		cp -a /overlayfs/v0_upgrade /overlayfs/v1_upgrade
		sync
	fi
}

main(){
	# S1 state
	## backup partition 1 kernel
	mkdir -p ${TMP_RFS_P1}
	mkdir -p ${OVERLAY_P1}

	# if p1 is already mount, umount it.
	if df -h | grep "${KERNEL_PART}" > /dev/null; then
		umount ${KERNEL_PART}
	fi
	mount ${KERNEL_PART} ${TMP_RFS_P1}
	cp -a ${TMP_RFS_P1}/* ${OVERLAY_P1}/

	## backup v1
	cp -a /overlayfs/v1 /overlayfs/v1.bak
	cp -a /overlayfs/v1_upgrade /overlayfs/v1_upgrade.bak

	# S2 state
	sync
	fw_setenv overlay_flag v1backup

	# S3 state
	downgrade
	sync
	fw_setenv overlay_flag v0

	# S4 state
	## rollback v0 partition 1 kernel
	mv /overlayfs/v0/p1/* ${TMP_RFS_P1}/
	umount ${TMP_RFS_P1}
	rm -rf /overlayfs/v0
	rm -rf /overlayfs/v0_upgrade
	## rollback v0
	cp -a /overlayfs/v1.bak /overlayfs/v0
	cp -a /overlayfs/v1_upgrade.bak /overlayfs/v0_upgrade
	sync
	fw_setenv overlay_flag v1d

	# S5 state
	reboot
}

main
